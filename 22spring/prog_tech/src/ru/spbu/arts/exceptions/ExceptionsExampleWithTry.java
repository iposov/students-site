package ru.spbu.arts.exceptions;

/*
    Функция, которая будет печатать указанную фразу указанное количество раз,
    но она не будет согласна печатать что угодно 13 раз.
 */
public class ExceptionsExampleWithTry {
    public static void main(String[] args) {
        // Блок try позволяет обработать исключения
        try {
            repeat("2 + 2 = 4", 4); // выполнилось
            repeat("2 * 2 != 5", 6); // выполнилось
            repeat("2 * 2 != 13", 13); // ошибка, в этом месте блок try завершается
            //Можно заменять 13 в предыдущей строке на 14, чтобы смотреть, что будет, если ошибка не случилась
            repeat("2 * 2 != 100", 100); // эта строка не выполняется
        } catch (Exception e) {
            //этот код внутри блока catch выполнится, если в try возникла ошибка
            //в переменной e будет храниться то самое исключение, которое было брошено.
            System.out.println("Функция repeat не довольна: " + e.getMessage());

            e.printStackTrace(); //распечатывает сообщение об ошибке и информацию, где она произошла.
            // Это ровно то же, что Java делает, если исключение не обработано.
            // Используйте это только для отладки, пользователю этот текст лучше не показывать
        }

        System.out.println("Вне блока try, этот текст точно напечатается");
    }

    // В заголовке есть throws Exception — это явное указание, что в функции может возникнуть Exception,
    // и функция его не обрабатывает
    private static void repeat(String text, int count) throws Exception {
        if (count == 13)
            //бросаем исключение, говорим, что возникла исключительная ситуация.
            //вместо Exception можно использовать другие классы, IOException, IllegalArgumentException
            throw new Exception("I don't like 13");
        // если возникла ошибка, программа до сюда не доходит
        // throw - как return, только не возвращается результат
        for (int i = 0; i < count; i++)
            System.out.println(text);
    }
}
